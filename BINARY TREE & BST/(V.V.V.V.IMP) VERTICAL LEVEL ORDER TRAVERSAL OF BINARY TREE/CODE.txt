/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    class Pair{
        public TreeNode value;
        public int col;
        public int row;
        public int nodeValue;

        Pair(TreeNode value, int col, int row){
            this.value = value;
            this.col = col;
            this.row = row;
            this.nodeValue = this.value.val;
        }

        public TreeNode getValue(){
            return this.value;
        }

        public int getCol(){
            return this.col;
        }

        public int getRow(){
            return this.row;
        }
    }

    public List<List<Integer>> verticalTraversal(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        if(root==null)
            return list;

        TreeMap<Integer, List<Pair>> hashMap = new TreeMap<>();
        Deque<Pair> deque = new ArrayDeque<>();
         int level = 0;
        deque.addLast(new Pair(root, 0, 0));
       
        while(!deque.isEmpty()){
            int size = deque.size();
            for(int i=0; i<size; i++){
                Pair frontNode = deque.peekFirst();
                deque.removeFirst();

                int col = frontNode.getCol();
                int row = frontNode.getRow();
                if(!hashMap.containsKey(col)){
                    hashMap.put(col, new ArrayList<>());
                }

                List<Pair> values = hashMap.get(col);
                TreeNode node = frontNode.getValue();
                values.add(frontNode);

                hashMap.put(col, values);

                if(node.left!=null){
                    deque.addLast(new Pair(node.left, col - 1, row + 1));
                }

                if(node.right!=null){
                    deque.addLast(new Pair(node.right, col + 1, row + 1));
                }
            }
        }
        for(Map.Entry<Integer, List<Pair>> entry: hashMap.entrySet()){
            List<Pair> val = entry.getValue();
            // Collections.sort(val);

            Collections.sort(val, new Comparator<Pair>(){

                @Override
                public int compare(Pair lhs, Pair rhs){
                    if(lhs.row == rhs.row)
                        return Integer.compare(lhs.nodeValue, rhs.nodeValue);

                    return Integer.compare(lhs.row, rhs.row);
                }
            });
            // list.add(val.stream().map(pair -> pair.nodeValue)).collect(Collectors.toList());
               list.add(val.stream().map(pair -> pair.nodeValue).collect(Collectors.toList()));
        }
        return list;
    }
}