
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        class Pair{
            TreeNode node;
            int level;

            Pair(TreeNode node, int level){
                this.node = node;
                this.level = level;
            }
        }

        Deque<Pair> deque = new ArrayDeque<Pair>();

        deque.addLast(new Pair(root, 0));
        TreeMap<Integer, Integer> hashMap = new TreeMap<>();
        int maxLevel  =  Integer.MIN_VALUE;


        while(deque.size() > 0){
            int size = deque.size();
            maxLevel = Math.max(maxLevel, deque.getLast().level - deque.getFirst().level + 1);
            for(int i=0; i<size; i++){
                Pair front = deque.peekFirst();
                deque.removeFirst();
                int leve= front.level;
                int level = front.level;
                if(front.node.left!=null)
                    deque.addLast(new Pair(front.node.left, 2*level+1));

                if(front.node.right!=null)
                    deque.addLast(new Pair(front.node.right, 2*level+2));
            }
        }

        return maxLevel;

    }
}