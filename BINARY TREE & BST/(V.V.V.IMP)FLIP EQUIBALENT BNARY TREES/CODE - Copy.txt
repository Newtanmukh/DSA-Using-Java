
class Solution {
    public long kthLargestLevelSum(TreeNode root, int k) {
        PriorityQueue<Long> minHeap = new PriorityQueue<>();

        Deque<TreeNode> deque = new ArrayDeque<>();
        deque.addLast(root);

        while(deque.size()> 0){
            long sum = 0;
            int size = deque.size();

            for(int i=0; i<size; i++){
                TreeNode front = deque.peekFirst();
                sum += (long)(front.val);
                deque.removeFirst();
                
                if(front.left!=null)
                    deque.addLast(front.left);

                if(front.right!=null)
                    deque.addLast(front.right);
            }

            minHeap.add(sum);

            if(minHeap.size()>k)
                minHeap.pop();
        }        

        if(minheap.size()<k)
            return -1;
        
        return minHeap.top();
    }
}