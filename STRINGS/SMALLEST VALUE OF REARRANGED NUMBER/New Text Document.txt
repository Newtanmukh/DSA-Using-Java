class Solution {
    public long smallestNumber(long num) {
        if(isNegavite(num)){
            return minNegNum(num);
        }

         return minPosNum(num);
    }

    public boolean isNegavite(long num){
        return num < 0l;
    }
    
    public long minPosNum(long num){
        List<Long> list = getDigits(num);
        if(list.isEmpty() || list.get(list.size()-1)==0l){
            return 0l;
        }
        
        int index = -1;

        for(int i=0; i<list.size(); i++){
            if(list.get(i)!=0){
                index = i;
                break;
            }
        }

        if(index==-1)
            return 0l;

        long ans = list.get(index);

        for(int i=0; i<list.size(); i++){
            if(index==i){
                continue;
            }else{
                ans = ans*10l + list.get(i);
            }
        }

        return ans;
    }

    public long minNegNum(long num){
        long abs = Math.abs(num);

        List<Long> list = getDigits(abs);
        Collections.reverse(list);
        long ans = 0;

        for(long x: list){
            ans = ans * 10 + x; 
        }

        return -ans;
    }

    public List<Long> getDigits(long num){
        List<Long> list = new ArrayList<>();

        while(num>0){
            list.add(num%10);
            num = num / 10;
        }

        Collections.sort(list);

        return list;
    }
}