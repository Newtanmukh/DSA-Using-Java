public class Solution {

    /*
        Approach is simple, find out the length of the longest palindrom begining from the starting index (0).
        After that, wwhat we will do is, we will take the last part of the string which is not in the palidnrome,
        we will take it reverse it and append forward to the current string.
        if the whole string itself is palindrome, then just break.
    */

    public String shortestPalindrome(String s) {
        if(s==null || s.length()==0)
            return s;

        int maxIndex = 0;
        int n = s.length();

        for(int j=n-1; j>=0; j--){
            if(isPalindrome(s, 0, j)){
                maxIndex = j;
                break;
            }
        }//largest palindrome is get.

        if(maxIndex == n-1){
            return s;//means that whole string is palindrome. so the minimal palindrome will be the string itself.
        }

        String suffix = s.substring(maxIndex + 1);
        StringBuilder reversedSuffix = new StringBuilder(suffix).reverse();

        return reversedSuffix.toString() + s;
        
    }

    public boolean isPalindrome(String s, int low, int high){
        if(s==null || s.length()==0)
            return true;

        while(low <= high){
            if(s.charAt(low)!=s.charAt(high)){
                return false;
            }
            low++;
            high--;
        }

        return true;
    }
}