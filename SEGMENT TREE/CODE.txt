class NumArray {

    public class SegTree{
        
        int start;
        int end;
        int sum;
        SegTree left;
        SegTree right;

        public SegTree(int start, int end){
            this.start = start;
            this.end = end;
            this.sum = 0;
            this.left = null;
            this.right = null;
        }
    }

    SegTree root = null;

    

    public NumArray(int[] nums) {
        root = buildTree(nums, 0, nums.length - 1);
    }
    
    public void update(int index, int val) {
        updateTree(root, index, val);
    }
    
    public int sumRange(int left, int right) {
        return sumRange(root, left, right);
    }


    private SegTree buildTree(int[] nums, int left, int right){
        if(left > right)
            return null;

        SegTree node = new SegTree(left, right);
        
        if(left==right){
            node.sum = nums[left];
        }else{
            int mid = left + (right - left)/2;
            node.left = buildTree(nums, left, mid);
            node.right = buildTree(nums, mid+1, right);
            node.sum = node.left.sum + node.right.sum;
        }

        return node;
    }

    private void updateTree(SegTree root, int index, int val){
        if(root.start==index && root.end==index){
            root.sum = val;
        }else{
            int mid = root.start + (root.end - root.start)/2;
            if(index <= mid){
                updateTree(root.left, index, val);
            }else{
                updateTree(root.right, index, val);
            }

            root.sum = root.left.sum + root.right.sum;
        }
    }

    public int sumRange(SegTree root, int start, int end){
        if(root.start == start && root.end == end){
            return root.sum;
        }

        int mid  = root.start + (root.end - root.start)/2;
        
        if(mid >= end){//mid of this subtree is greater than
            return sumRange(root.left, start, end);
        } else if(start >= mid + 1){
            return sumRange(root.right, start, end);
        }else{
            return sumRange(root.right, mid + 1, end) + 
                   sumRange(root.left, start, mid);
        }
    }

}

