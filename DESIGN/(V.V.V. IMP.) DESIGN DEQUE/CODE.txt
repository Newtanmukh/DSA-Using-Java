class MyCircularDeque {
    
    int[] dp;
    int front;
    int end;
    int count;
    int k;

    public MyCircularDeque(int k) {
        dp = new int[k];
        front = 0;
        end = 0;
        count = 0;
        this.k = k;
    }

    public boolean insertFront(int val) {
        if(isFull())
            return false;

        front = (front - 1 + k) %k;
        dp[front] = val;
        count++;
        return true;
    }

    public boolean insertLast(int val) {
       if(isFull())
            return false;

        dp[end] = val;
        end = (end + 1) %k;
        count++;
        return true;
    }

    public boolean deleteFront() {
        if(isEmpty())
            return false;
        
        int newIndex = (front + 1) % k;

        dp[front] = -1;
        front = newIndex;
        count--;
        return true;
    }

    public boolean deleteLast() {
        if(isEmpty())
            return false;

        end = (end - 1 + k)%k;

        dp[end] = -1;
        count--;
        return true;
    }

    public int getFront() {
       if(isEmpty())
         return -1;

        return dp[front];
    }

    public int getRear() {
        if(isEmpty())
            return -1;

        int index = (end - 1 + k) % k;

        return dp[index];
    }

    public boolean isEmpty() {
        return count==0;
    }

    public boolean isFull() {
       return count==k;
    }
}
