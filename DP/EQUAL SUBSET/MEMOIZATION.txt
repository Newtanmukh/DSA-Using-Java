int recursion(int sum, int index, int arr[], int dp[][]){
        
        if(sum < 0 || index < 0)
            return 0;
            
        if(dp[sum][index] > 0)
            return dp[sum][index];
        
        if(sum == 0)
            return dp[sum][index] = 1;
        
        if(index == 0)
            return dp[sum][index] = 0;
            
        return dp[sum][index] = 
                 recursion(sum, index - 1, arr, dp) 
               + recursion(sum - arr[index-1], index - 1, arr, dp);
        
        
    }
    
    int equalPartition(int N, int arr[])
    {
        int checkSum = 0;
        
        for(int i=0; i<N; i++){
            checkSum = checkSum + arr[i];
        }
        
        if(checkSum%2 == 1)
            return 0;
        
        int sum = checkSum/2;
        
        int[][] dp = new int [sum + 1][ N + 1 ];
        
        Arrays.fill(dp[0], 1);
        
        for(int i=1; i<sum+1; i++){
            Arrays.fill(dp[i], 0);
        }
        
        return recursion(sum, N, arr, dp) > 0 ? 1 : 0;
        
    }