 
    long recursion(int target, int[] arr, int numDice, long[][] dp){
        
        if(target==0 && numDice==0)
            return 1;
            
         if(target<0 || numDice<0)
            return 0;
            
        if(target==0 && numDice!=0)
            return 0;
            
        if(numDice==0 && target!=0)
            return 0;
            
        if(dp[numDice][target]!= -1)
            return dp[numDice][target];
            
        long cst = 0;
        
        for(int i=0; i<arr.length; i++){
            cst = cst + recursion(target-arr[i], arr, numDice-1,dp);
        }
        
        return dp[numDice][target] = cst;
        
    }
    
     long noOfWays(int M , int N , int X) {
        
        int[] arr = new int[M];
        for(int i=0; i<M; i++){
            arr[i] = i+1;
        }
        
        long[][] dp = new long[N+1][X+1];
        
        for(int i=0; i<N+1; i++){
            Arrays.fill(dp[i], -1);
        }
        return recursion(X, arr, N, dp);
    }