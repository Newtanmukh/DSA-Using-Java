long recursion(int target, int numDices, int[] dices, long[][] dp){
         if(target==0 && numDices==0)
            return 1;
            
        if(target==0 && numDices!=0)
            return 0;
            
        if(target!=0 && numDices==0)
            return 0;
            
        if(target<0 || numDices<0)
            return 0;
            
        if(dp[target][numDices]!=-1)
            return dp[target][numDices];
        
        long cst=0;
        for(int i=0; i<dices.length; i++){
            cst = cst + recursion(target-dices[i], numDices-1, dices, dp);
        }
        
       return dp[target][numDices] = cst;
     }
    
     long noOfWays(int M , int N , int X) {
        
        int[] dices = new int[M];
        
        for(int i=0; i<M; i++){
            dices[i] = i+1;
        }
        
        long[][] dp = new long[X+1][N+1];
        
        for(int i=0; i<X+1; i++){
            Arrays.fill(dp[i], -1);
        }
        
        return recursion(X, N, dices, dp);
    }