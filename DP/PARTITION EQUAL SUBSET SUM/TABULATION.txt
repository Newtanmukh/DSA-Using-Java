Boolean recursion(int sum, int index, int[] arr){
        if(sum==0)
            return true;
        
        if(index==0)
            return false;
        
        if(sum < arr[index-1])
            return recursion(sum, index-1, arr);
            
        return recursion(sum, index-1, arr) ||
                recursion(sum-arr[index-1], index-1, arr);
    }
    
    int equalPartition(int N, int arr[])
    {
        int checkSum = 0;
        
        for(int i=0; i<N; i++){
            checkSum = checkSum + arr[i];
        }
        
        if(checkSum%2 == 1)
            return 0;
        
        int sum = checkSum/2;
        
        
        Boolean[][] dp = new Boolean[sum + 1][N + 1];
        
        for(int i=0; i<sum+1; i++){
            Arrays.fill(dp[i], false);
        }
        
        Arrays.fill(dp[0], true);
        
        for(int i=1; i<sum+1; i++)
            for(int j=1; j<N+1; j++){
                if(i<arr[j-1]){
                    dp[i][j] = dp[i][j-1];
                }else{
                    dp[i][j] = dp[i][j-1] || dp[i-arr[j-1]][j-1];
                }
        }
        
        return dp[sum][N] ? 1 : 0;
        
    }