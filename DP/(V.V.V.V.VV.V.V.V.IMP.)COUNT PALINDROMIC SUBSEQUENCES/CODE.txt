



//GOOD SOLUTION : https://leetcode.com/problems/count-palindromic-subsequences/solutions/2850451/java-preffix-sum-o-n


public class Solution {

    public long MOD = (long)(1e9 + 7);

    public int countPalindromes(String s) {
        // long[] ll = new long[10];
        // ll[s.charAt(0) - '0']++;

    
        // long[][][] l = new long[s.length()][10][10];

        // for (int i = 1; i < s.length(); i++) {

        //     for (int j = 0; j < 10; j++) {
        //         l[i][j] = l[i - 1][j].clone();
        //     }

        //     for (int j = 0; j < 10; j++) {
        //         l[i][j][s.charAt(i) - '0'] += ll[j];
        //     }

        //     ll[s.charAt(i) - '0']++;
        // }

        // long[] rr = new long[10];
        // rr[s.charAt(s.length() - 1) - '0']++;

 
        // long[][][] r = new long[s.length()][10][10];


        // for (int i = s.length() - 2; i >= 0; i--) {
 
        //     for (int j = 0; j < 10; j++) {
        //         r[i][j] = r[i + 1][j].clone();
        //     }
        //     r[i] = r[i + 1].clone();

        //     for (int j = 0; j < 10; j++) {
        //         r[i][j][s.charAt(i) - '0'] += rr[j];
        //     }

        //     rr[s.charAt(i) - '0']++;
        // }

        // long res = 0;

        // for (int i = 2; i < s.length() - 2; i++) {
        //     for (int j = 0; j < 10; j++) {
        //         for (int k = 0; k < 10; k++) {
        //             res = (res + l[i - 1][j][k] * r[i + 1][j][k]) % 1_000_000_007;
        //         }
        //     }
        // }
        // return (int) res;



        int n = s.length();
        long[] left = new long[10];//will take track of the number of some numbers to the left at index i.
        long[][][] dp = new long[n][10][10];//dp[i][j][k] denotes the number of pairs (j,k) such that j is followed by k and ending at index i.

        long res = 0;
        long[] right = new long[10];//will take track of the number of some numbers to the right at index i.
        long[][][] dp1 = new long[n][10][10];//dp[i][j][k] denotes the number of pairs (j,k) such that j is followed by k and starting at index i.


        //populating the left arrays firt.
        for(int i=0; i<n; i++){
            int c = s.charAt(i) - '0';
            if(i > 0){
                for(int j=0; j<10; j++){
                    for(int k=0; k<10; k++){
                        dp[i][j][k] = dp[i-1][j][k];//number of pairs (j,k ) upti index i-1 will be same for index i + some additional indexes.  
                    }
                }
            }
            
            for(int j=0; j<10; j++){
                dp[i][j][c] += left[j]; //the current is ending at c, so pairs will be (j,c). so for all such pairs , increment them by the number of j's on the left
            }
            left[c]++;
        }


        for(int i=n-1; i>=0; i--){
            int c = s.charAt(i) - '0';

            if(i <= n-2){
                for(int j=0; j<10; j++){
                    for(int k=0; k<10; k++){
                        dp1[i][j][k] = dp1[i + 1][j][k];
                    }
                }
            }

            for(int k=0; k<10; k++){
                dp1[i][c][k] += right[k];
            }

            right[c]++;
        }

        long ans = 0l;

        for(int i=2; i<n-2; i++){
            int c = s.charAt(i) - '0';
            for(int j=0; j<10; j++)
                for(int k=0; k<10; k++){
                    ans =  (ans + dp[i-1][j][k] * dp1[i+1][k][j])%MOD;//since palindrome will be like,  (j, k, *, k, j)
                }
        }

        return (int) ans;
    }
}
