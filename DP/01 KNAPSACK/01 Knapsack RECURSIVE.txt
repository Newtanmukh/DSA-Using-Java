int recursion(int weight, int wt[], int val[], int index){
        
        if(index ==0 || weight==0)
        return 0;
        
        
          if (wt[index - 1] > weight)
                return recursion(weight, wt, val, index - 1); // Do not include the item
        
        return Math.max(val[index-1] + recursion(weight - wt[index - 1], wt, val, index - 1),
               recursion(weight, wt, val, index - 1));
        
    }
    
    
     int knapSack(int W, int wt[], int val[], int n) 
    { 
         int profit =      recursion(W, wt, val, n);
        
        return profit;
    } 




// NOTE the thing is that here right, ideally we should also check if weight<0 , return INT_MIN. 
// this is bcoz lets say their values were considered but the weight never summed upto total weight(more than this weight).
// so in that case even the sum of values were too big it would be considered in the max function , but that is not right.
// but that case will never come its because let us say that weight becamse very small, then recursion(weight, wt, val, index - 1) will be called always, it means no subsequent weight will be considered. so its sorted anyways.

// same thing in subset sum problem as well.