class Solution{
    
    
    int[] red;//colorCode is 1
    int[] blue;//colorCode is 2
    int[] green;//colorCode is 3
    
    public long distinctColoring(int n, int[]r, int[]g, int[]b){
        this.red = r;
        this.green = g;
        this.blue = b;
        
        long[][] dp = new long[n+1][4];
        
        for(int i=0; i<n+1; i++){
            Arrays.fill(dp[i], 0);   
        }
        
         for(int i=1; i<n+1; i++)
            for(int j=1; j<4; j++){
                if(j==1){//considering red.
                    long considerPreviousBlue = red[i-1] + dp[i-1][2];
                    long considerPreviousGreen = red[i-1] + dp[i-1][3];
                    dp[i][j] = Math.min(considerPreviousGreen, considerPreviousBlue);
                }else if(j==2){//considering blue.
                    long considerPreviousRed = blue[i-1] + dp[i-1][1];
                    long considerPreviousGreen = blue[i-1] + dp[i-1][3];
                    dp[i][j] = Math.min(considerPreviousRed, considerPreviousGreen);
                }else{//considering green.
                    long considerPreviousRed = green[i-1] + dp[i-1][1];
                    long considerPreviousBlue = green[i-1] + dp[i-1][2];
                    dp[i][j] = Math.min(considerPreviousRed, considerPreviousBlue);
                }
            }
       
       return Math.min(dp[n][1], Math.min(dp[n][2], dp[n][3]));
    }
}