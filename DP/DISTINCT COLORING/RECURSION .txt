class Solution{
    
    
    int[] red;//colorCode is 1
    int[] blue;//colorCode is 2
    int[] green;//colorCode is 3
    
    
    public long getMinCost(int n, int previousColor){
        
        if(n==0)
            return 0;
        
        if(previousColor==1){
            long considerBlue = blue[n-1] + getMinCost(n-1, 2);
            long considerGreen = green[n-1] + getMinCost(n-1, 3);
            
            return Math.min(considerBlue, considerGreen);
        }
        
        else if(previousColor==2){
            long considerRed = red[n-1] + getMinCost(n-1, 1);
            long considerGreen = green[n-1] + getMinCost(n-1, 3);
            
            return Math.min(considerRed, considerGreen);
        }
        
        else{
            long considerBlue = blue[n-1] + getMinCost(n-1, 2);
            long considerRed = red[n-1] + getMinCost(n-1, 1);
            
            return Math.min(considerBlue, considerRed);
        }
    }
    
    public long distinctColoring(int n, int[]r, int[]g, int[]b){
        this.red = r;
        this.green = g;
        this.blue = b;
        
        return Math.min(red[n-1] + getMinCost(n-1, 1),
                        Math.min(blue[n-1] + getMinCost(n-1, 2),
                        green[n-1] + getMinCost(n-1, 3)));
    }
}