class Solution {

    public int num = 0;

    public int[] dp; 
    public int mod = (int)(1e9 + 7);

    public int memoization(int curr, int low, int high, int numZeroes, int numOnes){
        if(curr==0)//no of ways in which we can construct 0 length string is simply 1.
            return dp[0] = 1;
        
        if(curr > high || curr < 0)
            return 0;

        if(dp[curr]!=-1)
            return dp[curr]%mod;



        return dp[curr] = (memoization(curr - numZeroes, low, high, numZeroes, numOnes) %mod
                 + memoization(curr - numOnes, low, high, numZeroes, numOnes)%mod)%mod;
    }

    public int countGoodStrings(int low, int high, int zero, int one) {
        dp = new int[high + 1];
        Arrays.fill(dp, -1);
        dp[0] = 1;

        memoization(high, low, high, zero, one);

        int totalSum = 0;
        for(int i=low; i<=high; i++){
            totalSum = totalSum + memoization(i, low, high, zero, one);
            totalSum = totalSum % mod;
        }

        // return dp[high] - dp[low - 1]
        return totalSum;    
    }
}