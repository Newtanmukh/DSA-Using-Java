 public ArrayList<Integer> bfsOfGraph(int v, ArrayList<ArrayList<Integer>> adj) {
        
        boolean[] visited = new boolean[v];
        Arrays.fill(visited, false);
        
        Deque<Integer> deque = new ArrayDeque<>();
        deque.addLast(0);
        visited[0] = true;
        
        ArrayList<Integer> ans = new ArrayList<>();
        
        while(deque.size() > 0){
            int size = deque.size();
            
            for(int i=0; i<size; i++){
                Integer front  = deque.peekFirst();
                deque.removeFirst();
                
                ans.add(front);
                
                for(int j=0; j<adj.get(front).size(); j++){
                    int child = adj.get(front).get(j);
                    
                    if(!visited[child]){
                        visited[child] = true;
                        deque.addLast(child);
                    }
                }
            }
        }
        
        return ans;
    }
}