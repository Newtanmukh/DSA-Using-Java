// https://leetcode.com/problems/is-graph-bipartite/


class Solution {

    boolean isValid = true;

    public boolean isBipartite(int[][] graph) {
        int n = graph.length;
        int[] colors = new int[n];	
        Arrays.fill(colors, 0);		
        this.isValid = true;
				
        for (int i = 0; i < n; i++) {
            if (colors[i] == 0) {
                validColor(graph, colors, 1, i);
                // if(!isValid)
                //     return isValid;
            }
        }
        return isValid;
    }
    
    public void validColor(int[][] graph, int[] colors, int color, int node) {

        if (colors[node] != 0) {
            if(colors[node] != color){
                this.isValid = false;
            }
            return;
        }       
        colors[node] = color;       
        for (int next : graph[node]) {
                validColor(graph, colors, -color, next);
        }
    }
}










/*



class Solution {
    public boolean isBipartite(int[][] graph) {
        int len = graph.length;
        int[] colors = new int[len];
        
        for (int i = 0; i < len; i++) {
            if (colors[i] != 0) continue;
            Queue<Integer> queue = new LinkedList<>();
            queue.offer(i);
            colors[i] = 1;   // Blue: 1; Red: -1.
            
            while (!queue.isEmpty()) {
                int cur = queue.poll();
                for (int next : graph[cur]) {
                    if (colors[next] == 0) {          // If this node hasn't been colored;
                        colors[next] = -colors[cur];  // Color it with a different color;
                        queue.offer(next);
                    } else if (colors[next] != -colors[cur]) {   // If it is colored and its color is different, return false;
                        return false;
                    }
                }
            }
        }
        
        return true;
    }
}





*/