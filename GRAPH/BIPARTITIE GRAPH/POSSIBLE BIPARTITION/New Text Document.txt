class Solution {

    boolean valid = true;

    public boolean possibleBipartition(int n, int[][] dislikes) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();

        for(int i=0; i<n; i++)
            adj.add(new ArrayList<>());

        for(int[] dislike: dislikes){
            int u = dislike[0];
            int v = dislike[1];
            u--;
            v--;

            ArrayList<Integer> first = adj.get(u);
            first.add(v);
            adj.set(u, first);

            ArrayList<Integer> second = adj.get(v);
            second.add(u);
            adj.set(v, second);
        }


        int[] colors = new int[n];

        Arrays.fill(colors, 0);


        for(int i=0; i<n; i++){
            if(colors[i]==0){
                Deque<Integer> deque = new ArrayDeque<Integer>();
                deque.addLast(i);
                colors[i] = 1;

                while(deque.size() > 0){
                    int size = deque.size();

                    for(int j=0; j<size; j++){
                        int front = deque.peekFirst();
                        deque.removeFirst();

                        for(int neighBour: adj.get(front)){
                            if(colors[neighBour]==0){
                                colors[neighBour] = -colors[front];
                                deque.addLast(neighBour);
                            }else if(colors[neighBour]==colors[front]){
                                return false;
                            }
                        }
                    }
                }
            }
        }
        return true;
    }
}