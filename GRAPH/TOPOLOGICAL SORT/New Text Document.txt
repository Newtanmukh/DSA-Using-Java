class Solution
{
    public static void dfs(int node, boolean[] visited, ArrayList<ArrayList<Integer>> adj, List<Integer> topoList){
        
        visited[node] = true;
        ArrayList<Integer> neighBours = adj.get(node);
        
        for(int neighBour: neighBours){
            if(visited[neighBour]==false){
                dfs(neighBour, visited, adj, topoList);
            }
        }     
        
        topoList.add(node);
    }
    
    static int[] topoSort(int v, ArrayList<ArrayList<Integer>> adj) 
    {
        boolean[] visited = new boolean[v];
        Arrays.fill(visited, false);
        
        ArrayList<Integer> topoList = new ArrayList<>();
        
        for(int i=0; i<v; i++){
            if(!visited[i]){
                dfs(i, visited, adj, topoList);
            }
        }
        
        Collections.reverse(topoList);
        
        int[] arr = new int[topoList.size()];
        
        for(int i=0; i<topoList.size(); i++){
            arr[i] = topoList.get(i);
        }
        
        return arr;
        
    }
}