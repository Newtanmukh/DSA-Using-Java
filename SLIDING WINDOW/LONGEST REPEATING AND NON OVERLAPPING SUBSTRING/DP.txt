class Solution {
      static String longestSubstring(String s, int n) {
        int dp[][] = new int[n+1][n+1];
        int max = 0,end = 0;
        for(int i=1;i<=n;i++){
            for(int j=i+1;j<=n;j++){
                if(s.charAt(i-1)==s.charAt(j-1) && j - dp[i-1][j-1] > i)//basically, from j till dp[i-1][j-1] characters backwards, it should not overlap. we are considering the current character of j AND dp[i-1][j-1] characters back.
                
                /***
                for similicity , consider this example: 
                
                
                
                A A B A A B A A B A
      i     j

dp[i-1][j-1] = 3  already

now, j - dp[i-1][j-1] should be greater than i. even if it is equal, its problem.
                
                */
                    dp[i][j] = 1 + dp[i-1][j-1];
                else
                    dp[i][j] = 0;
                
                if(max<dp[i][j]){
                     max = dp[i][j];
                     end = i;
                }
            }
        }
        return max>0?s.substring(end-max,end):"-1";
    }
};