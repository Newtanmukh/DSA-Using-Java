class Solution
{
    ArrayList<Integer> countDistinct(int arr[], int n, int k)
    {
        HashMap<Integer, Integer> hashMap = new HashMap<>();
        ArrayList<Integer> list = new ArrayList<>();
        
        // Integer i = 0;
        // Integer j = 0;
        
        // while(j<n){
        //     hashMap.put(arr[j], hashMap.getOrDefault(arr[j], 0) + 1);
        //     if(j-i+1<k){
        //         j++;
        //     }else if(j-i+1==k){
        //         list.add(hashMap.size());
                
        //         if(hashMap.get(arr[i])!=null){
        //             hashMap.put(arr[i], hashMap.get(arr[i]) - 1);
        //         }
                
        //         if(hashMap.get(arr[i])!=null && hashMap.get(arr[i])==0){
        //             hashMap.remove(arr[i]);
        //         }
                
        //         i++;
        //         j++;
                
        //     }
        // }
        
        for(Integer i=0; i<k-1; i++){
            hashMap.put(arr[i], hashMap.getOrDefault(arr[i], 0) + 1);
        }
        
        for(Integer j=k-1; j<n; j++){
             hashMap.put(arr[j], hashMap.getOrDefault(arr[j], 0) + 1);
             list.add(hashMap.size());
             
             //NOW FROM HERE, WE KEEP DECREASING THE FIRST ELEMENT FOR THE NEXT Sliding window
             Integer firstElement = arr[j-k+1];
             
             if(hashMap.get(firstElement)!=null){
                 hashMap.put(firstElement, hashMap.get(firstElement)-1);
             }
             
             if(hashMap.get(firstElement)!=null && hashMap.get(firstElement) ==0){
                 hashMap.remove(firstElement);
             }
             
        }
        
        return list;
    }
}