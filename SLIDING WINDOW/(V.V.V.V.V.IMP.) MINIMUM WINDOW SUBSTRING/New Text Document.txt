class Solution {
    public String EMPTY_STRING = "";
    public String minWindow(String s, String t) {

        if(s==null || t==null)
            return EMPTY_STRING;
        
        if(s.equals(EMPTY_STRING) || t.equals(EMPTY_STRING))
            return EMPTY_STRING;


        HashMap<Character, Integer> hashMap = new HashMap<>();
        int start = 0, end = 0, minLen = Integer.MAX_VALUE, startIndex = 0, endIndex = 0;

        for(int i=0; i<t.length(); i++){
            char c = t.charAt(i);
            hashMap.put(c, hashMap.getOrDefault(c, 0) + 1);
        }
        
        int count = hashMap.size();

        char[] sCharArray = s.toCharArray();

        while(end < s.length()){
            char tempCharEnd = s.charAt(end);
            if(hashMap.containsKey(tempCharEnd)){
                hashMap.put(tempCharEnd, hashMap.get(tempCharEnd) - 1);
                
                if(hashMap.get(tempCharEnd)==0){
                    count--;
                }
            }

            while(count==0){
                if(minLen > end - start + 1){
                    minLen = end - start + 1;
                    startIndex = start;
                    endIndex = end + 1;
                }

                char tempStartChar = s.charAt(start);
                if(hashMap.containsKey(tempStartChar)){
                    hashMap.put(tempStartChar, hashMap.get(tempStartChar) + 1);
                }

                if(hashMap.getOrDefault(tempStartChar, 0)>0){
                    count++;
                }
                start++;
            }
            end++;
        }


        return minLen == Integer.MAX_VALUE ? EMPTY_STRING : s.substring(startIndex, endIndex);

    }
}