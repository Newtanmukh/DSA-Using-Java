// https://leetcode.com/problems/final-prices-with-a-special-discount-in-a-shop/




class Solution {
    public int[] finalPrices(int[] prices) {
        int n = prices.length;

        int[] dp = new int[n];
        Arrays.fill(dp, 0);

        Stack<Integer> stack = new Stack<>();

        for(int i=n-1; i>=0; i--){
            while(stack.size() > 0 && stack.peek() > prices[i]){
                stack.pop();
            }

            dp[i] = stack.size() > 0 ? stack.peek() : 0;
            stack.push(prices[i]);
            dp[i] = prices[i] - dp[i];
        }

        return dp;
    }
}
















//NEXT SMALLER ELEMENT



static ArrayList<Integer> nextSmallerElement(ArrayList<Integer> arr, int n){
        Stack<Integer> stack = new Stack<>();
        
        n = arr.size();
        int[] dp = new int[n];
        
        Arrays.fill(dp, -1);
        
        for(int i=n-1; i>=0; i--){
            
            while(stack.size() > 0 && stack.peek()>=arr.get(i)){
                stack.pop();
            }
            
            dp[i] = stack.size() > 0 ? stack.peek() : -1;
            
            stack.push(arr.get(i));
        }
        
        ArrayList<Integer> list = new ArrayList<>();
        for(int i=0; i<n; i++){
            list.add(dp[i]);
        }

        return list;
    }