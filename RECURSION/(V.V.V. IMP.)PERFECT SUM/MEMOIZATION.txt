class Solution{
    
    int requiredSum;
    int count;
    int[][] dp;
    
    
    int mod = (int)1e9 + 7;
    public int dfs(int arr[], int sum, int index){
        if(index==0 && sum == 0){//this means that we have concluded all the subsets then only we arrived to this soln.
            return dp[sum][index] = 1;
        }
        
        if(index==0){
            return dp[sum][index] = 0;
        }
        
        if(dp[sum][index] != -1)
            return dp[sum][index];
    
        
        if(arr[index - 1] > sum){
            return  dp[sum][index] = (dfs(arr, sum, index-1) % mod);
        }
        
        return  dp[sum][index] = (dfs(arr, sum - arr[index - 1], index - 1) % mod
                    + dfs(arr, sum, index - 1)%mod)%mod;
    }
    
	public int perfectSum(int arr[],int n, int sum) 
	{ 
	    int[][] dp = new int[sum + 1][n + 1];
	    
        for(int i=0; i<sum+1; i++)
            Arrays.fill(dp[i], -1);
	    this.dp = dp;
	    return dfs(arr, sum, n)%mod;
	} 
}