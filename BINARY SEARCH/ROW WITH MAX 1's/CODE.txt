
class Solution {
    
    public int binarySearch(int[] arr){
        int low = 0;
        int high = arr.length - 1;
        
        int first = -1;
        while(low<=high){
            int mid = low + (high-low)/2;
            if(arr[mid]==1){
                first = mid;
                high = mid - 1;
            }else{
                low = mid + 1;
            }
        }
        
        int last = -1;
        
        low = 0;
        high = arr.length - 1;
        
        while(low<=high){
            int mid = low + (high - low)/2;
            if(arr[mid]==1){
                last = mid;
                low = mid + 1;
            }else{
                low = mid + 1; 
            }
        }
        
        if(first==-1 || last==-1)
            return 0;
        
        return last - first+1;
    }
    
    public int rowWithMax1s(int arr[][]) {
        int[] dp = new int[arr.length];
        
        Arrays.fill(dp, 0);
        
        int maxi = 0;
        int index = 0;
        for(int i=0; i<arr.length; i++){
            dp[i] = binarySearch(arr[i]);
            if(dp[i]>maxi){
                maxi = dp[i];
                index = i;
            }
        }
        
        return maxi!=0?index:-1;
        
    }
}