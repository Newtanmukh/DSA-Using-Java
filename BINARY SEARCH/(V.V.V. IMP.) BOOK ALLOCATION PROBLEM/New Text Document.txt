//https://www.naukri.com/code360/problems/allocate-books_1090540?utm_source=youtube&utm_medium=affiliate&utm_campaign=codestudio_Striver_BinarySeries&leftPanelTabValue=PROBLEM&count=25&page=16&search=&sort_entity=order&sort_order=ASC

//in this case allocation is contiguous .

import java.util.ArrayList;
public class Solution {
    public static int findPages(ArrayList<Integer> arr, int n, int m) {
        // Write your code here.
            if(m>n) return -1; // edge cases


        long high = getMaxPages(arr);//all pages assigned to one student, just a condition.
        long low = getMinPages(arr);//the max pages assigned to only one student.
        long ans = high;

        while(low <= high){
            long mid = low + (high - low)/2;
            if(canAllocate(arr, mid, m)){
                ans = Math.min(ans, mid);
                high = mid - 1;
            }else{
                low = mid + 1;
            }
        }

        return (int)ans;
    }

    public static boolean canAllocate(ArrayList<Integer> arr, long maxPages, int m){
        int students = 1;

        long filled = arr.get(0);

        for(int i=1; i<arr.size(); i++){
            int current = arr.get(i);
            if(filled + (long)current > maxPages){
                students++;
                filled = 0l;
            }
            filled = filled + (long)current; 
            
            if(students>m)
                return false;
        }

        if(students>m)
                return false;
        
        return true;
    }

    public static long getMinPages(ArrayList<Integer> arr){
        long ans = 0l;
         for(int i=0; i<arr.size(); i++){
            ans = Math.max(ans, arr.get(i));
        } 
        return ans;
    }

    public static long getMaxPages(ArrayList<Integer> arr){
        long sum = 0L;

        for(int i=0; i<arr.size(); i++){
            sum = sum + (long)arr.get(i);
        } 

        return sum;
    }
}