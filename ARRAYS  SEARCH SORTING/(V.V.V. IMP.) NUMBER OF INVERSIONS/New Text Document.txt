class Solution {
    
    long merge(long arr[], int low, int mid, int high){
        long[] tempArray = new long[high - low + 1];
        int tempIndex = 0;
        
        long inverSionCount = 0;
        int i = low;
        int j = mid + 1;
        
        while(i<=mid && j<=high){
            if(arr[i] > arr[j]){
                inverSionCount = inverSionCount + (long)(mid - i + 1);
                tempArray[tempIndex] = arr[j];
                j++;
                tempIndex++;
            }else{
                tempArray[tempIndex] = arr[i];
                i++;
                tempIndex++;
            }
        }
        
        while(i<=mid){
            tempArray[tempIndex] = arr[i];
            tempIndex++;
            i++;
        }
        
        while(j<=high){
            tempArray[tempIndex] = arr[j];
            tempIndex++;
            j++;
        }
        
        for( i=0; i<tempArray.length; i++){
            arr[i+low] = tempArray[i];
        }
        
        return inverSionCount;
    }
    
    long mergeSort(long arr[], int low, int high){
        
        if(low>=high)
            return 0l;
        
        long inverSionCount = 0;    
        int mid = low + (high - low)/2;
        
        inverSionCount += mergeSort(arr, low, mid);
        inverSionCount += mergeSort(arr, mid+1, high);
        inverSionCount += merge(arr, low, mid, high);
        
        return inverSionCount;
    }
    
    long inversionCount(long arr[], int n) {
            return mergeSort(arr, 0, n-1);
    }
}