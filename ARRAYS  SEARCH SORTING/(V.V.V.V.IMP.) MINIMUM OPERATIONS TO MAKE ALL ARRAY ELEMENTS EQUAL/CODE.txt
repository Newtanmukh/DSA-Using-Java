/*
	Here, the last test case was failing because one of the number inside query was giving wrong answer.
	just changed n*query to (long)n * (long)query
*/





class Solution {
    public List<Long> minOperations(int[] nums, int[] queries) {
        int n = nums.length;
        long[] prefixSum = new long[n];
        Arrays.fill(prefixSum, 0L);
        Arrays.sort(nums);
        

        long totalSum = fillPrefixArray(nums, prefixSum);
        List<Long> list = new ArrayList<>();

        for(int query: queries){
            int index = indexOfSmallerElem(nums, query);
            if(index==-1){
                list.add(Math.abs(totalSum - (long)((long)n * (long)query)));
            }else{

                long leftOps = (long)((long)(index + 1) * (long)query) - prefixSum[index];
                
                long rightOps = (totalSum - prefixSum[index]) - (long)((long)(n - (index + 1)) * (long)query);
                
                list.add(leftOps + rightOps);
            }
        }

        return list;
    }

    public int indexOfSmallerElem(int[] nums, int target){
        int low = 0;
        int high = nums.length - 1;
        int index = -1;

        while(low <= high){
            int mid = low + (high - low)/2;
            if(nums[mid] <= target){
                index = mid;
                low = mid + 1;
            }else{
                high = mid - 1;
            }
        }
        return index;
    }

    public long fillPrefixArray(int[] nums, long[] prefixSum){
        long prefix = 0;

        for(int i=0; i<prefixSum.length; i++){
            prefix = prefix + (long)nums[i];
            prefixSum[i] = prefix;
        }
        return prefix;
    }
}