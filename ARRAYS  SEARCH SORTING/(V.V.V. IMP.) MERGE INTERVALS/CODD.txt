class Solution {

    class Interval{
        int start;
        int end;

        Interval(int start, int end){
            this.start = start;
            this.end = end;
        }
    }

    public int[][] merge(int[][] arr) {
        //why do we sort using the start Time ? 

        int n = arr.length;

        Arrays.sort(arr, new Comparator<int[]>(){
            @Override
            public int compare(int[] lhs, int[] rhs){
                return Integer.compare(lhs[0], rhs[0]);
            }
        });

        ArrayList<Interval> intervals = new ArrayList<>();

        intervals.add(new Interval(arr[0][0], arr[0][1]));

        for(int i =1; i<n; i++){
            Interval lastInterval = intervals.get(intervals.size() - 1);
            int lastStartTime = lastInterval.start;
            int lastEndTime = lastInterval.end;

            int currentStartTime = arr[i][0];
            int currentEndTime  = arr[i][1];

            if(currentStartTime > lastEndTime ){
                    intervals.add(new Interval(currentStartTime, currentEndTime));
            }else{
                    int maxEndTime = Math.max(currentEndTime, lastEndTime);
                    intervals.set(intervals.size() - 1, new Interval(lastStartTime, maxEndTime));
            }
        }

        int[][] dp = new int[intervals.size()][2];

        for(int i=0; i<intervals.size(); i++){
            Interval interval = intervals.get(i);
            dp[i][0] = interval.start;
            dp[i][1] = interval.end;
        }

        return dp;
        
    }
}