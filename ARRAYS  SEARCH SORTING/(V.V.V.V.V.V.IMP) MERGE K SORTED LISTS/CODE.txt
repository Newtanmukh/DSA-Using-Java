
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists==null || lists.length==0)
            return null;

        ListNode head = merge(lists, 0, lists.length - 1);
        return head;
    }

    public ListNode merge(ListNode[] lists, int low, int high){
        if(low > high)
            return null;

        if(low==high)
            return lists[low];

        int mid = low + (high - low)/2;

        ListNode first = merge(lists, low, mid);
        ListNode second = merge(lists, mid + 1, high);

        return mergeTwoSortedLinkedLists(first, second);
    }

    public ListNode mergeTwoSortedLinkedLists(ListNode l1, ListNode l2){
        if(l1==null)
            return l2;
        
        if(l2==null)
            return l1;

        ListNode node = new ListNode(-1);
        ListNode ret = node;
        while(l1 != null && l2 != null){
            if(l1.val > l2.val){
                node.next = l2;
                l2 = l2.next;
                node = node.next;
            }else{
                node.next = l1;
                l1 = l1.next;
                node = node.next;
            }
        }

        if(l1!=null){
            node.next = l1;
        }

        if(l2!=null){
            node.next = l2;
        }

        return ret.next;
    }
}